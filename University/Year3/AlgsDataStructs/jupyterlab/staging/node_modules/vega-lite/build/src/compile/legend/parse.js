import { COLOR, FILLOPACITY, SHAPE, STROKEOPACITY } from '../../channel';
import { getFieldOrDatumDef, isFieldDef, isFieldOrDatumDefForTimeFormat, title as fieldDefTitle } from '../../channeldef';
import { LEGEND_SCALE_CHANNELS } from '../../legend';
import { normalizeTimeUnit } from '../../timeunit';
import { GEOJSON } from '../../type';
import { deleteNestedProperty, getFirstDefined, keys, varName } from '../../util';
import { mergeTitleComponent } from '../common';
import { numberFormat } from '../format';
import { guideEncodeEntry } from '../guide';
import { isUnitModel } from '../model';
import { parseGuideResolve } from '../resolve';
import { parseInteractiveLegend } from '../selection/transforms/legends';
import { defaultTieBreaker, makeImplicit, mergeValuesWithExplicit } from '../split';
import { LegendComponent, LEGEND_COMPONENT_PROPERTIES } from './component';
import * as encode from './encode';
import * as properties from './properties';
import { direction, type } from './properties';
export function parseLegend(model) {
    if (isUnitModel(model)) {
        model.component.legends = parseUnitLegend(model);
    }
    else {
        model.component.legends = parseNonUnitLegend(model);
    }
}
function parseUnitLegend(model) {
    const { encoding } = model;
    const legendComponent = {};
    for (const channel of [COLOR, ...LEGEND_SCALE_CHANNELS, FILLOPACITY, STROKEOPACITY]) {
        const def = getFieldOrDatumDef(encoding[channel]);
        if (!def || !model.getScaleComponent(channel)) {
            continue;
        }
        if (channel === SHAPE && isFieldDef(def) && def.type === GEOJSON) {
            continue;
        }
        legendComponent[channel] = parseLegendForChannel(model, channel);
    }
    return legendComponent;
}
function getLegendDefWithScale(model, channel) {
    const scale = model.scaleName(channel);
    if (model.mark === 'trail') {
        if (channel === 'color') {
            // trail is a filled mark, but its default symbolType ("stroke") should use "stroke"
            return { stroke: scale };
        }
        else if (channel === 'size') {
            return { strokeWidth: scale };
        }
    }
    if (channel === 'color') {
        return model.markDef.filled ? { fill: scale } : { stroke: scale };
    }
    return { [channel]: scale };
}
function isExplicit(value, property, legend, fieldDef) {
    switch (property) {
        case 'disable':
            return legend !== undefined; // if axis is specified or null/false, then it's enable/disable state is explicit
        case 'values':
            // specified legend.values is already respected, but may get transformed.
            return !!(legend === null || legend === void 0 ? void 0 : legend.values);
        case 'title':
            // title can be explicit if fieldDef.title is set
            if (property === 'title' && value === (fieldDef === null || fieldDef === void 0 ? void 0 : fieldDef.title)) {
                return true;
            }
    }
    // Otherwise, things are explicit if the returned value matches the specified property
    return value === (legend || {})[property];
}
export function parseLegendForChannel(model, channel) {
    var _a, _b;
    const legend = model.legend(channel);
    const legendCmpt = new LegendComponent({}, getLegendDefWithScale(model, channel));
    parseInteractiveLegend(model, channel, legendCmpt);
    for (const property of LEGEND_COMPONENT_PROPERTIES) {
        const value = getProperty(property, legend, channel, model);
        if (value !== undefined) {
            const explicit = isExplicit(value, property, legend, model.fieldDef(channel));
            if (explicit || model.config.legend[property] === undefined) {
                legendCmpt.set(property, value, explicit);
            }
        }
    }
    const legendEncoding = (_a = legend === null || legend === void 0 ? void 0 : legend.encoding) !== null && _a !== void 0 ? _a : {};
    const selections = legendCmpt.get('selections');
    const legendEncode = {};
    for (const part of ['labels', 'legend', 'title', 'symbols', 'gradient', 'entries']) {
        const legendEncodingPart = guideEncodeEntry((_b = legendEncoding[part]) !== null && _b !== void 0 ? _b : {}, model);
        const fieldOrDatumDef = getFieldOrDatumDef(model.encoding[channel]);
        const value = encode[part]
            ? encode[part](fieldOrDatumDef, legendEncodingPart, model, channel, legendCmpt) // apply rule
            : legendEncodingPart; // no rule -- just default values
        if (value !== undefined && keys(value).length > 0) {
            legendEncode[part] = Object.assign(Object.assign(Object.assign({}, ((selections === null || selections === void 0 ? void 0 : selections.length) && isFieldDef(fieldOrDatumDef)
                ? { name: `${varName(fieldOrDatumDef.field)}_legend_${part}` }
                : {})), ((selections === null || selections === void 0 ? void 0 : selections.length) ? { interactive: !!selections } : {})), { update: value });
        }
    }
    if (keys(legendEncode).length > 0) {
        legendCmpt.set('encode', legendEncode, !!(legend === null || legend === void 0 ? void 0 : legend.encoding));
    }
    return legendCmpt;
}
function getProperty(property, legend, channel, model) {
    var _a;
    if (property === 'disable') {
        return legend !== undefined && !legend;
    }
    legend = legend || {}; // assign object so the rest doesn't have to check if legend exists
    const { encoding, mark } = model;
    const fieldOrDatumDef = getFieldOrDatumDef(encoding[channel]);
    const legendConfig = model.config.legend;
    const timeUnit = isFieldDef(fieldOrDatumDef) ? (_a = normalizeTimeUnit(fieldOrDatumDef.timeUnit)) === null || _a === void 0 ? void 0 : _a.unit : undefined;
    const scaleType = model.getScaleComponent(channel).get('type');
    switch (property) {
        // TODO: enable when https://github.com/vega/vega/issues/1351 is fixed
        // case 'clipHeight':
        //   return getFirstDefined(specifiedLegend.clipHeight, properties.clipHeight(properties.type(...)));
        case 'direction':
            return direction({
                legend,
                legendConfig,
                timeUnit,
                channel,
                scaleType
            });
        case 'format':
            // We don't include temporal field here as we apply format in encode block
            if (isFieldOrDatumDefForTimeFormat(fieldOrDatumDef)) {
                return undefined;
            }
            return numberFormat(fieldOrDatumDef.type, legend.format, model.config);
        case 'formatType':
            // As with format, we don't include temporal field here as we apply format in encode block
            if (isFieldOrDatumDefForTimeFormat(fieldOrDatumDef)) {
                return undefined;
            }
            return legend.formatType;
        case 'gradientLength':
            return getFirstDefined(
            // do specified gradientLength first
            legend.gradientLength, legendConfig.gradientLength, 
            // Otherwise, use smart default based on plot height
            properties.defaultGradientLength({
                model,
                legend,
                legendConfig,
                channel,
                scaleType
            }));
        case 'labelOverlap':
            return getFirstDefined(legend.labelOverlap, properties.defaultLabelOverlap(scaleType));
        case 'symbolType':
            return getFirstDefined(legend.symbolType, properties.defaultSymbolType(mark, channel, encoding.shape, model.markDef.shape));
        case 'title':
            return fieldDefTitle(fieldOrDatumDef, model.config, { allowDisabling: true });
        case 'type':
            return type({ legend, channel, timeUnit, scaleType, alwaysReturn: false });
        case 'values':
            return properties.values(legend, fieldOrDatumDef);
    }
    // Otherwise, return specified property.
    return legend[property];
}
function parseNonUnitLegend(model) {
    const { legends, resolve } = model.component;
    for (const child of model.children) {
        parseLegend(child);
        for (const channel of keys(child.component.legends)) {
            resolve.legend[channel] = parseGuideResolve(model.component.resolve, channel);
            if (resolve.legend[channel] === 'shared') {
                // If the resolve says shared (and has not been overridden)
                // We will try to merge and see if there is a conflict
                legends[channel] = mergeLegendComponent(legends[channel], child.component.legends[channel]);
                if (!legends[channel]) {
                    // If merge returns nothing, there is a conflict so we cannot make the legend shared.
                    // Thus, mark legend as independent and remove the legend component.
                    resolve.legend[channel] = 'independent';
                    delete legends[channel];
                }
            }
        }
    }
    for (const channel of keys(legends)) {
        for (const child of model.children) {
            if (!child.component.legends[channel]) {
                // skip if the child does not have a particular legend
                continue;
            }
            if (resolve.legend[channel] === 'shared') {
                // After merging shared legend, make sure to remove legend from child
                delete child.component.legends[channel];
            }
        }
    }
    return legends;
}
export function mergeLegendComponent(mergedLegend, childLegend) {
    var _a, _b, _c, _d, _e, _f;
    if (!mergedLegend) {
        return childLegend.clone();
    }
    const mergedOrient = mergedLegend.getWithExplicit('orient');
    const childOrient = childLegend.getWithExplicit('orient');
    if (mergedOrient.explicit && childOrient.explicit && mergedOrient.value !== childOrient.value) {
        // TODO: throw warning if resolve is explicit (We don't have info about explicit/implicit resolve yet.)
        // Cannot merge due to inconsistent orient
        return undefined;
    }
    let typeMerged = false;
    // Otherwise, let's merge
    for (const prop of LEGEND_COMPONENT_PROPERTIES) {
        const mergedValueWithExplicit = mergeValuesWithExplicit(mergedLegend.getWithExplicit(prop), childLegend.getWithExplicit(prop), prop, 'legend', 
        // Tie breaker function
        (v1, v2) => {
            switch (prop) {
                case 'symbolType':
                    return mergeSymbolType(v1, v2);
                case 'title':
                    return mergeTitleComponent(v1, v2);
                case 'type':
                    // There are only two types. If we have different types, then prefer symbol over gradient.
                    typeMerged = true;
                    return makeImplicit('symbol');
            }
            return defaultTieBreaker(v1, v2, prop, 'legend');
        });
        mergedLegend.setWithExplicit(prop, mergedValueWithExplicit);
    }
    if (typeMerged) {
        if ((_c = (_b = (_a = mergedLegend.implicit) === null || _a === void 0 ? void 0 : _a.encode) === null || _b === void 0 ? void 0 : _b.gradient) !== null && _c !== void 0 ? _c : {}) {
            deleteNestedProperty(mergedLegend.implicit, ['encode', 'gradient']);
        }
        if ((_f = (_e = (_d = mergedLegend.explicit) === null || _d === void 0 ? void 0 : _d.encode) === null || _e === void 0 ? void 0 : _e.gradient) !== null && _f !== void 0 ? _f : {}) {
            deleteNestedProperty(mergedLegend.explicit, ['encode', 'gradient']);
        }
    }
    return mergedLegend;
}
function mergeSymbolType(st1, st2) {
    if (st2.value === 'circle') {
        // prefer "circle" over "stroke"
        return st2;
    }
    return st1;
}
//# sourceMappingURL=parse.js.map