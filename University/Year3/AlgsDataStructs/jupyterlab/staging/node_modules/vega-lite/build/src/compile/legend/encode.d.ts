import { SymbolEncodeEntry } from 'vega';
import { NonPositionScaleChannel, ScaleChannel } from '../../channel';
import { DatumDef, Gradient, TypedFieldDef, Value } from '../../channeldef';
import { Encoding } from '../../encoding';
import { UnitModel } from '../unit';
import { LegendComponent } from './component';
export declare function symbols(fieldOrDatumDef: TypedFieldDef<string> | DatumDef, symbolsSpec: any, model: UnitModel, channel: ScaleChannel, legendCmp: LegendComponent): SymbolEncodeEntry;
export declare function gradient(fieldOrDatumDef: TypedFieldDef<string> | DatumDef, gradientSpec: any, model: UnitModel, channel: ScaleChannel, legendCmp: LegendComponent): SymbolEncodeEntry;
export declare function labels(fieldOrDatumDef: TypedFieldDef<string> | DatumDef, specifiedlabelsSpec: any, model: UnitModel, channel: NonPositionScaleChannel, legendCmp: LegendComponent): any;
export declare function entries(fieldOrDatumDef: TypedFieldDef<string> | DatumDef, entriesSpec: any, model: UnitModel, channel: NonPositionScaleChannel, legendCmp: LegendComponent): {
    fill: {
        value: string;
    };
};
export declare function getFirstConditionValue<V extends Value | Gradient>(channelDef: Encoding<string>['fill' | 'stroke' | 'shape']): V;
//# sourceMappingURL=encode.d.ts.map