import { getSecondaryRangeChannel } from '../../channel';
import { getFieldOrDatumDef } from '../../channeldef';
import { ScaleType } from '../../scale';
import { keys } from '../../util';
import { formatSignalRef } from '../format';
export function labels(model, channel, specifiedLabelsSpec) {
    var _a;
    const { encoding, config } = model;
    const fieldOrDatumDef = (_a = getFieldOrDatumDef(encoding[channel])) !== null && _a !== void 0 ? _a : getFieldOrDatumDef(encoding[getSecondaryRangeChannel(channel)]);
    const axis = model.axis(channel) || {};
    const { format, formatType } = axis;
    const text = formatSignalRef({
        fieldOrDatumDef,
        field: 'datum.value',
        format,
        formatType,
        config,
        isUTCScale: model.getScaleComponent(channel).get('type') === ScaleType.UTC,
        omitTimeFormatConfig: true,
        omitNumberFormatAndEmptyTimeFormat: true // no need to generate number format for encoding block as we can use Vega's axis format
    });
    let labelsSpec = Object.assign(Object.assign({}, (text ? { text } : {})), specifiedLabelsSpec);
    labelsSpec = Object.assign(Object.assign({}, labelsSpec), specifiedLabelsSpec);
    return keys(labelsSpec).length === 0 ? undefined : labelsSpec;
}
//# sourceMappingURL=encode.js.map